// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "stlab.itechart-group.com/go/food_delivery/authentication_service/model"
)

// MockAppUser is a mock of AppUser interface.
type MockAppUser struct {
	ctrl     *gomock.Controller
	recorder *MockAppUserMockRecorder
}

// MockAppUserMockRecorder is the mock recorder for MockAppUser.
type MockAppUserMockRecorder struct {
	mock *MockAppUser
}

// NewMockAppUser creates a new mock instance.
func NewMockAppUser(ctrl *gomock.Controller) *MockAppUser {
	mock := &MockAppUser{ctrl: ctrl}
	mock.recorder = &MockAppUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppUser) EXPECT() *MockAppUserMockRecorder {
	return m.recorder
}

// CheckEmail mocks base method.
func (m *MockAppUser) CheckEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckEmail indicates an expected call of CheckEmail.
func (mr *MockAppUserMockRecorder) CheckEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockAppUser)(nil).CheckEmail), email)
}

// CreateCustomer mocks base method.
func (m *MockAppUser) CreateCustomer(User *model.CreateCustomer) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", User)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockAppUserMockRecorder) CreateCustomer(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockAppUser)(nil).CreateCustomer), User)
}

// CreateStaff mocks base method.
func (m *MockAppUser) CreateStaff(User *model.CreateStaff) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStaff", User)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStaff indicates an expected call of CreateStaff.
func (mr *MockAppUserMockRecorder) CreateStaff(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStaff", reflect.TypeOf((*MockAppUser)(nil).CreateStaff), User)
}

// DeleteUserByID mocks base method.
func (m *MockAppUser) DeleteUserByID(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockAppUserMockRecorder) DeleteUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockAppUser)(nil).DeleteUserByID), id)
}

// GetUserAll mocks base method.
func (m *MockAppUser) GetUserAll(page, limit int) ([]model.ResponseUser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAll", page, limit)
	ret0, _ := ret[0].([]model.ResponseUser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserAll indicates an expected call of GetUserAll.
func (mr *MockAppUserMockRecorder) GetUserAll(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAll", reflect.TypeOf((*MockAppUser)(nil).GetUserAll), page, limit)
}

// GetUserByDataFilter mocks base method.
func (m *MockAppUser) GetUserByDataFilter(page, limit int, filters *model.RequestFilters) ([]model.ResponseUser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByDataFilter", page, limit, filters)
	ret0, _ := ret[0].([]model.ResponseUser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserByDataFilter indicates an expected call of GetUserByDataFilter.
func (mr *MockAppUserMockRecorder) GetUserByDataFilter(page, limit, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByDataFilter", reflect.TypeOf((*MockAppUser)(nil).GetUserByDataFilter), page, limit, filters)
}

// GetUserByEmail mocks base method.
func (m *MockAppUser) GetUserByEmail(email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAppUserMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAppUser)(nil).GetUserByEmail), email)
}

// GetUserByID mocks base method.
func (m *MockAppUser) GetUserByID(id int) (*model.ResponseUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*model.ResponseUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAppUserMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAppUser)(nil).GetUserByID), id)
}

// GetUserByRoleFilter mocks base method.
func (m *MockAppUser) GetUserByRoleFilter(page, limit int, filters *model.RequestFilters) ([]model.ResponseUser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByRoleFilter", page, limit, filters)
	ret0, _ := ret[0].([]model.ResponseUser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserByRoleFilter indicates an expected call of GetUserByRoleFilter.
func (mr *MockAppUserMockRecorder) GetUserByRoleFilter(page, limit, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByRoleFilter", reflect.TypeOf((*MockAppUser)(nil).GetUserByRoleFilter), page, limit, filters)
}

// GetUserPasswordByID mocks base method.
func (m *MockAppUser) GetUserPasswordByID(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordByID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordByID indicates an expected call of GetUserPasswordByID.
func (mr *MockAppUserMockRecorder) GetUserPasswordByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordByID", reflect.TypeOf((*MockAppUser)(nil).GetUserPasswordByID), id)
}

// RestorePassword mocks base method.
func (m *MockAppUser) RestorePassword(restore *model.RestorePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestorePassword", restore)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestorePassword indicates an expected call of RestorePassword.
func (mr *MockAppUserMockRecorder) RestorePassword(restore interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePassword", reflect.TypeOf((*MockAppUser)(nil).RestorePassword), restore)
}

// UpdateUser mocks base method.
func (m *MockAppUser) UpdateUser(User *model.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", User)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAppUserMockRecorder) UpdateUser(User interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAppUser)(nil).UpdateUser), User)
}
